<?php

declare(strict_types=1);

/*
 * @copyright   2018 Mautic Inc. All rights reserved
 * @author      Mautic, Inc.
 *
 * @link        https://www.mautic.com
 *
 * @license     GNU/GPLv3 http://www.gnu.org/licenses/gpl-3.0.html
 */

namespace MauticPlugin\MauticVtigerCrmBundle\Vtiger\Model;

use Mautic\IntegrationsBundle\Mapping\MappedFieldInfoInterface;
use MauticPlugin\MauticVtigerCrmBundle\Vtiger\Repository\Direction\FieldDirectionInterface;
use MauticPlugin\MauticVtigerCrmBundle\Vtiger\Type\CommonType;
use MauticPlugin\MauticVtigerCrmBundle\Vtiger\Type\TypeFactory;

class ModuleFieldInfo implements MappedFieldInfoInterface
{
    /**
     * @var string
     */
    private $name;

    /**
     * @var string
     */
    private $label;

    /**
     * @var bool
     */
    private $required;

    /**
     * @var CommonType
     */
    private $type;

    /**
     * @var bool
     */
    private $isUnique;

    /**
     * @var bool
     */
    private $nullable;

    /**
     * @var bool
     */
    private $editable;

    /**
     * @var string
     */
    private $default;

    /**
     * @var FieldDirectionInterface
     */
    private $fieldDirection;

    /**
     * @param \stdClass               $data
     * @param FieldDirectionInterface $fieldDirection
     */
    public function __construct(\stdClass $data, FieldDirectionInterface $fieldDirection)
    {
        $this->label    = $data->label;
        $this->name     = $data->name;
        $this->nullable = $data->nullable;
        $this->editable = $data->editable;

        $this->setDefault($data);
        $this->setIsUnique($data);
        $this->setRequired($data->mandatory, $this->name);

        $this->type = TypeFactory::create($data->type);

        $this->fieldDirection = $fieldDirection;
    }

    /**
     * @return string
     */
    public function getName(): string
    {
        return $this->name;
    }

    /**
     * @return string
     */
    public function getLabel(): string
    {
        return $this->label;
    }

    /**
     * @return bool
     */
    public function isRequired(): bool
    {
        return $this->required;
    }

    /**
     * @return bool
     */
    public function showAsRequired(): bool
    {
        return $this->isRequired();
    }

    /**
     * @return mixed
     */
    public function getTypeName()
    {
        return $this->getType()->getName();
    }

    /**
     * @return CommonType
     */
    public function getType(): CommonType
    {
        return $this->type;
    }

    /**
     * @param CommonType $type
     *
     * @return ModuleFieldInfo
     */
    public function setType(CommonType $type): self
    {
        $this->type = $type;

        return $this;
    }

    /**
     * @return bool
     */
    public function isUnique(): bool
    {
        return $this->isUnique;
    }

    /**
     * @return bool
     */
    public function isNullable(): bool
    {
        return $this->nullable;
    }

    /**
     * @return bool
     */
    public function isEditable(): bool
    {
        return $this->editable;
    }

    /**
     * @return string
     */
    public function getDefault(): string
    {
        return $this->default;
    }

    /**
     * @return bool
     */
    public function hasTooltip(): bool
    {
        return false;
    }

    /**
     * @return string
     *
     * @throws \Exception
     */
    public function getTooltip(): string
    {
        throw new \Exception('This field has no tooltip');
    }

    /**
     * @return bool
     */
    public function isBidirectionalSyncEnabled(): bool
    {
        return $this->fieldDirection->isFieldReadable($this) && $this->fieldDirection->isFieldWritable($this);
    }

    /**
     * @return bool
     */
    public function isToIntegrationSyncEnabled(): bool
    {
        return $this->fieldDirection->isFieldWritable($this);
    }

    /**
     * @return bool
     */
    public function isToMauticSyncEnabled(): bool
    {
        return $this->fieldDirection->isFieldReadable($this);
    }

    /**
     * @param \stdClass $data
     */
    private function setDefault(\stdClass $data): void
    {
        $this->default = $data->default ?? null;
    }

    /**
     * @param \stdClass $data
     */
    private function setIsUnique(\stdClass $data): void
    {
        if (!isset($data->isunique) && in_array('autogenerated', (array) $data->type, true)) {
            $this->isUnique = true;
        } elseif (!isset($data->isunique)) {
            $this->isUnique = false;
        } else {
            $this->isUnique = $data->isunique;
        }
    }

    /**
     * @param bool   $required
     * @param string $name
     */
    private function setRequired(bool $required, string $name): void
    {
        $this->required = $required || 'email' === $name;
    }
}
